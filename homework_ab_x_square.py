# -*- coding: utf-8 -*-
"""Homework_ab_X_square.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DlE_GjRkaiR9YySUnUg-NFoA-SgZJAtW
"""

!pip3 install retentioneering

import retentioneering
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, time
from scipy.stats import chi2
import numpy as np
import warnings
warnings.filterwarnings('ignore')
import IPython

from google.colab import drive
drive.mount('/content/drive')

experiment1_1 = pd.read_csv('drive/My Drive/experiment1_1.csv')
experiment1_2 = pd.read_csv('drive/My Drive/experiment1_2.csv')
experiment2_1 = pd.read_csv('drive/My Drive/experiment2_1.csv')
experiment2_2 = pd.read_csv('drive/My Drive/experiment2_2.csv')

"""Посмотрим на датасеты эксперимента 1 - вроде сравнимы, по 5 тыс пользователей и не пересекаются, второй эксперимент по длительности немного больше - но, видимо, добирали нужную базу"""

experiment1_1

experiment1_1.dtypes

experiment1_1['client_id'].nunique()

experiment1_2

experiment1_2.dtypes

experiment1_1['client_id'].nunique()

len(set(experiment1_1['client_id']).difference(set(experiment1_2['client_id'])))

"""Посмотрим какие события у нас есть, чтобы понять событие, которое отвечает за конверсию. События в датасетах одинаковые (и их количества, кстати, тоже более-менее похожи), за событие конверсии будем считать payment_done"""

experiment1_1['event'].value_counts()

experiment1_2['event'].value_counts()

"""Посмотрим, какое количество уникальных пользователей сконвертировалось в группах"""

experiment1_1[experiment1_1['event']=='payment_done']['client_id'].nunique()

experiment1_2[experiment1_2['event']=='payment_done']['client_id'].nunique()

"""Посмотрим на графы переходов. Они не очень информативны по переходу в покупки, потому что очень мало событий конверсии. Зато мы можем посмотреть, как пользователи уходят в lost"""

retentioneering.config.update({
    'event_col':'event',
    'event_time_col':'timestamp',
    'user_col': 'client_id'
})

IPython.display.HTML(
experiment1_1.rete.plot_graph(thresh=0.01,
                     targets = {'payment_done':'green',
                                'lost':'red'}
                    )
)

IPython.display.HTML(
experiment1_2.rete.plot_graph(thresh=0.01,
                     targets = {'payment_done':'green',
                                'lost':'red'}
                    )
)

"""Наконец, оценим, есть ли количественная разница в сконвертировавшихся пользователях, используя метрику хи квадрат (метрика, подходящая для конверсии):"""

O=np.array([138,151,4862,4849])
T=np.array([145,145,4855,4855])
D=np.sum(np.square(T-O)/T)
pvalue=chi2.sf(D, df=1)
print("distance d: {0}\np-value: {1}".format(D,pvalue))

"""p-value сильно больше 0,05, не можем с уверенностью сказать, что изменение страниц в эксперименте значимо повлияло на конверсию в лучшую сторону. Воронки сильно идентичные, даже невооруженным взглядом, и на графах это видно

Посмотрим на результаты второго эксперимента
"""

experiment2_1

experiment2_2

experiment2_1['client_id'].nunique()

experiment2_2['client_id'].nunique()

len(set(experiment1_1['client_id']).difference(set(experiment1_2['client_id'])))

experiment2_1['event'].value_counts()

"""Контрольная группа, похоже, та же"""

experiment2_1[experiment2_1['event']=='payment_done']['client_id'].nunique()

experiment2_2['event'].value_counts()

"""О, что-то интересное"""

experiment2_2[experiment2_2['event']=='payment_done']['client_id'].nunique()

"""Кто-то даже пару раз покупал. Интересно посмотреть на граф: пользователи теперь не уходят в лост с главной и со страница ноутбуков. Меньшие доли пользователей рапределяются по разделам, и меньшие доли возвращаются из lost на main, то есть посещают сайт повторно, но зато они чаще делают покупки. Большая разница в количестве переходов на item details, нужно оценить, что мы изменили в страницах товара"""

IPython.display.HTML(
experiment2_2.rete.plot_graph(thresh=0.01,
                     targets = {'payment_done':'green',
                                'lost':'red'}
                    )
)

"""Посмотрим на матрицы переходов экспериментов 1 и 2"""

df = experiment1_2.rete.get_adjacency(weight_col='client_id', norm_type='full')

import seaborn as sns

#from IPython.html import widgets
from IPython.display import HTML
def rotateheader():
    return  [
      #  dict(selector="th.col_heading",
    #             props=[("writing-mode", "vertical-rl"), 
     #                   ('transform', 'rotateZ(-45deg)'),
     #                   ])
     dict(selector="th", props=[("font-size", "75%"),
                            ("text-align", "right")
                         
                          ]),
        dict(selector="th.col_heading", props=[("font-size", "75%"),
                            ("text-align", "center"),
                          ("transform", "translate(0%,-140%) rotate(-15deg)")
                          ]),
             dict(selector="caption", props=[("caption-side", "bottom")])
]
 

cm = sns.light_palette("green", as_cmap=True)
print("\n\n\n")
df.style.background_gradient(cmap=cm).set_table_styles(rotateheader()).set_caption(" .")

df = experiment2_2.rete.get_adjacency(weight_col='client_id', norm_type='full')

import seaborn as sns

#from IPython.html import widgets
from IPython.display import HTML
def rotateheader():
    return  [
      #  dict(selector="th.col_heading",
    #             props=[("writing-mode", "vertical-rl"), 
     #                   ('transform', 'rotateZ(-45deg)'),
     #                   ])
     dict(selector="th", props=[("font-size", "75%"),
                            ("text-align", "right")
                         
                          ]),
        dict(selector="th.col_heading", props=[("font-size", "75%"),
                            ("text-align", "center"),
                          ("transform", "translate(0%,-140%) rotate(-15deg)")
                          ]),
             dict(selector="caption", props=[("caption-side", "bottom")])
]
 

cm = sns.light_palette("green", as_cmap=True)
print("\n\n\n")
df.style.background_gradient(cmap=cm).set_table_styles(rotateheader()).set_caption(" .")

"""На матрицах тоже видно, что по-разному отрабатывает item_reviews и почему-то возрастают обращения в support из корзины. У нас лучше работает поддержка? Но зачем вообще в неё обращаются?
Хи=квадрат ожидаемо показывает наличие статистической разницы.
"""

O=np.array([138,873,4862,4127])
T=np.array([506,506,4494,4494])
D=np.sum(np.square(T-O)/T)
pvalue=chi2.sf(D, df=1)
print("distance d: {0}\np-value: {1}".format(D,pvalue))

"""Мы получили какое-то бесконечно маленькое plavue. Очевидно, что тестовая страница во втором тесте отлично просто отрабатывает. Что бы мы там ни сделали, нужно вносить такие же изменения. Даже не верится, надо сроки проверить"""

experiment2_1['timestamp']=pd.to_datetime(experiment2_1['timestamp'])

experiment2_1['date_only']=experiment2_1['timestamp'].dt.date

pd.crosstab(experiment2_1.date_only, experiment2_1.client_id.nunique())

experiment2_2['timestamp']=pd.to_datetime(experiment2_2['timestamp'])

experiment2_2['date_only']=experiment2_2['timestamp'].dt.date

pd.crosstab(experiment2_2.date_only, experiment2_2.client_id.nunique())

"""Как-то в эксперименте 2_2 в 2 раза больше трафика в предновогодние дни. Если мы уверены, что ничего для этого не делали, люди просто возвращались наконец дооформить покупку, то эксперимент удачный. Но надо подумать"""